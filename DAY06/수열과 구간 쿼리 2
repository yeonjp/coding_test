정수 배열 arr와 2차원 정수 배열 queries이 주어집니다. queries의 원소는 각각 하나의 query를 나타내며, [s, e, k] 꼴입니다.

각 query마다 순서대로 s ≤ i ≤ e인 모든 i에 대해 k보다 크면서 가장 작은 arr[i]를 찾습니다.

각 쿼리의 순서에 맞게 답을 저장한 배열을 반환하는 solution 함수를 완성해 주세요.
단, 특정 쿼리의 답이 존재하지 않으면 -1을 저장합니다.

제한사항
1 ≤ arr의 길이 ≤ 1,000
0 ≤ arr의 원소 ≤ 1,000,000
1 ≤ queries의 길이 ≤ 1,000
0 ≤ s ≤ e < arr의 길이
0 ≤ k ≤ 1,000,000
입출력 예
arr	queries	result
[0, 1, 2, 4, 3]	[[0, 4, 2],[0, 3, 2],[0, 2, 2]]	[3, 4, -1]
입출력 예 설명
입출력 예 #1

첫 번째 쿼리의 범위에는 0, 1, 2, 4, 3이 있으며 이 중 2보다 크면서 가장 작은 값은 3입니다.
두 번째 쿼리의 범위에는 0, 1, 2, 4가 있으며 이 중 2보다 크면서 가장 작은 값은 4입니다.
세 번째 쿼리의 범위에는 0, 1, 2가 있으며 여기에는 2보다 큰 값이 없습니다.
따라서 [3, 4, -1]을 return 합니다.

import java.util.Arrays;

class Solution {
    public int[] solution(int[] arr, int[][] queries) {
        // 각 쿼리에 대한 답을 저장할 배열을 queries의 길이만큼 생성
        int[] answer = new int[queries.length];
        
        // 기본값을 -1로 설정 (조건에 맞는 값을 찾지 못할 경우)
        Arrays.fill(answer, -1);
        
        // 각 쿼리에 대해 반복
        for (int i = 0; i < queries.length; i++) {
            // 현재 쿼리의 s, e, k 값을 추출
            int s = queries[i][0];
            int e = queries[i][1];
            int k = queries[i][2];
            
            // 현재 쿼리에서 찾을 최소값을 Integer.MAX_VALUE로 초기화
            int minValue = Integer.MAX_VALUE;
            
            // s부터 e까지 배열의 값을 확인
            for (int j = s; j <= e; j++) {
                // 현재 값이 k보다 크고, minValue보다 작은 경우
                if (arr[j] > k && arr[j] < minValue) {
                    // minValue를 현재 값으로 업데이트
                    minValue = arr[j];
                    // answer[i]를 현재 값으로 업데이트
                    answer[i] = minValue;
                }
            }
        }
        
        // 최종적으로 각 쿼리에 대한 답을 저장한 배열을 반환
        return answer;
    }
}
