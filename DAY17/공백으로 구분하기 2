Description
단어가 공백 한 개 이상으로 구분되어 있는 문자열 my_string이 매개변수로 주어질 때, my_string에 나온 단어를 앞에서부터 순서대로 담은 문자열 배열을 return 하는 solution 함수를 작성해 주세요.

제한사항
my_string은 영소문자와 공백으로만 이루어져 있습니다.
1 ≤ my_string의 길이 ≤ 1,000
my_string의 맨 앞과 맨 뒤에도 공백이 있을 수 있습니다.
my_string에는 단어가 하나 이상 존재합니다.
입출력 예
my_string	result
" i    love  you"	["i", "love", "you"]
"    programmers  "	["programmers"]
입출력 예 설명
입출력 예 #1

예제 1번의 my_string은 " i    love  you"로 공백을 기준으로 단어를 나누면 "i", "love", "you" 3개의 단어가 있습니다. 따라서 ["i", "love", "you"]를 return 합니다.
입출력 예 #2

예제 2번의 my_string은 "    programmers  "로 단어는 "programmers" 하나만 있습니다. 따라서 ["programmers"]를 return 합니다.

solution

class Solution {
    public String[] solution(String my_string) {
        String[] answer = {};
        
        answer = my_string.trim().split("\\s+");
        
        return answer;
    }
}

import java.util.ArrayList;
import java.util.List;

class Solution {
    public String[] solution(String my_string) {
        List<String> words = new ArrayList<>();
        StringBuilder word = new StringBuilder();
        
        // 공백을 제거하면서 문자열을 순회합니다.
        for (int i = 0; i < my_string.length(); i++) {
            char c = my_string.charAt(i);
            
            if (c != ' ') {
                word.append(c);  // 공백이 아닐 때는 단어에 문자를 추가합니다.
            } else {
                if (word.length() > 0) {
                    words.add(word.toString());  // 공백을 만나면 현재 단어를 리스트에 추가합니다.
                    word.setLength(0);  // 단어를 초기화합니다.
                }
            }
        }
        
        // 마지막 단어가 남아있다면 추가합니다.
        if (word.length() > 0) {
            words.add(word.toString());
        }

        // 리스트를 배열로 변환하여 반환합니다.
        return words.toArray(new String[0]);
    }
}
