Description
문자열 배열 strArr이 주어집니다. strArr의 원소들을 길이가 같은 문자열들끼리 그룹으로 묶었을 때 가장 개수가 많은 그룹의 크기를 return 하는 solution 함수를 완성해 주세요.

제한사항
1 ≤ strArr의 길이 ≤ 100,000
1 ≤ strArr의 원소의 길이 ≤ 30
strArr의 원소들은 알파벳 소문자로 이루어진 문자열입니다.
입출력 예
strArr	result
["a","bc","d","efg","hi"]	2
입출력 예 설명
입출력 예 #1

각 문자열들을 길이에 맞게 그룹으로 묶으면 다음과 같습니다.
문자열 길이	문자열 목록	개수
1	["a","d"]	2
2	["bc","hi"]	2
3	["efg"]	1
개수의 최댓값은 2이므로 2를 return 합니다.

solution
class Solution {
    public int solution(String[] strArr) {
        
        int[] len = new int[strArr.length];
        
        for(String s : strArr){
            len[s.length()]++;
        }
        
        int answer = 0;
        
        for(int i = 0; i < len.length; i++){
            if(answer < len[i]){
                answer = len[i];
            }
        }
        
        return answer;
    }
}

--------------------------------
개선한 코드
class Solution {
    public int solution(String[] strArr) {
        // 최대 문자열 길이는 30이므로 배열 크기를 31로 설정
        // len[i]는 길이가 i인 문자열의 개수를 저장
        int[] len = new int[31]; 
        
        // 각 문자열의 길이를 카운팅
        for(String s : strArr) {
            // 문자열 s의 길이에 해당하는 인덱스에 1을 더해줌
            len[s.length()]++;
        }
        
        // 가장 큰 그룹의 크기를 저장할 변수 초기화
        int answer = 0;
        
        // 배열 len을 순회하며 가장 큰 값(즉, 가장 많은 문자열이 있는 길이)을 찾음
        for(int i = 0; i < len.length; i++) {
            // 현재 저장된 최댓값 answer보다 len[i]가 크면 answer를 업데이트
            if(answer < len[i]) {
                answer = len[i];
            }
        }
        
        // 가장 큰 그룹의 크기 반환
        return answer;
    }
}

코드 설명 (주석 포함)
int[] len = new int[31];

len 배열은 크기가 31로 설정되어 있습니다. 각 인덱스 i는 길이가 i인 문자열의 개수를 나타냅니다. 최대 문자열 길이가 30이므로, len[0]은 사용되지 않지만, 편의상 배열 크기를 31로 설정했습니다.
for(String s : strArr) { len[s.length()]++; }

이 반복문은 strArr의 각 문자열을 순회하면서, 해당 문자열의 길이를 구하고, 그 길이에 해당하는 len 배열의 인덱스 값을 1씩 증가시킵니다. 예를 들어, 길이가 5인 문자열이 있다면 len[5]의 값이 1 증가합니다.
int answer = 0;

answer 변수는 가장 큰 그룹의 크기를 저장합니다. 초기값은 0으로 설정됩니다.
for(int i = 0; i < len.length; i++) { if(answer < len[i]) { answer = len[i]; } }

이 반복문은 len 배열을 순회하며 가장 큰 값을 찾습니다. answer < len[i] 조건이 참이면, answer를 len[i]로 업데이트하여 현재까지 발견된 가장 큰 그룹의 크기를 저장합니다.
return answer;

마지막으로, 가장 큰 그룹의 크기를 반환합니다. 이 값이 곧 문제에서 요구한 답이 됩니다.
핵심 아이디어
이 코드의 핵심은 문자열을 길이별로 그룹화하고, 그 중 가장 큰 그룹의 크기를 계산하는 것입니다.
효율적인 메모리 사용을 위해 최대 길이 30까지를 처리할 수 있는 크기 31의 배열을 사용했습니다.
