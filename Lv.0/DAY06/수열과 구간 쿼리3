정수 배열 arr와 2차원 정수 배열 queries이 주어집니다. queries의 원소는 각각 하나의 query를 나타내며, [i, j] 꼴입니다.

각 query마다 순서대로 arr[i]의 값과 arr[j]의 값을 서로 바꿉니다.

위 규칙에 따라 queries를 처리한 이후의 arr를 return 하는 solution 함수를 완성해 주세요.

제한사항
1 ≤ arr의 길이 ≤ 1,000
0 ≤ arr의 원소 ≤ 1,000,000
1 ≤ queries의 길이 ≤ 1,000
0 ≤ i < j < arr의 길이
입출력 예
arr	queries	result
[0, 1, 2, 3, 4]	[[0, 3],[1, 2],[1, 4]]	[3, 4, 1, 0, 2]
입출력 예 설명
입출력 예 #1

각 쿼리에 따라 arr가 다음과 같이 변합니다.
arr
[0, 1, 2, 3, 4]
[3, 1, 2, 0, 4]
[3, 2, 1, 0, 4]
[3, 4, 1, 0, 2]
따라서 [3, 4, 1, 0, 2]를 return 합니다.

문제 해설
이 문제는 주어진 정수 배열 arr와 여러 개의 쿼리를 처리하여, 각 쿼리마다 배열의 특정 두 인덱스에 있는 값을 서로 바꾸는 것입니다. 최종적으로 모든 쿼리를 처리한 후의 배열을 반환하는 문제입니다.

문제 설명
입력:

arr: 정수 배열, 예를 들어 [0, 1, 2, 3, 4].
queries: 2차원 정수 배열, 각각의 원소는 [i, j] 형태의 쿼리입니다. 예를 들어 [[0, 3], [1, 2], [1, 4]].
쿼리 처리 방법:

각 쿼리 [i, j]마다 arr[i]와 arr[j]의 값을 서로 바꿉니다.
예를 들어, 쿼리 [0, 3]을 처리하면 arr[0]와 arr[3]의 값을 바꿉니다.
처리 결과:

모든 쿼리를 처리한 후의 배열을 반환합니다.
예시 설명
입력 예시:

arr = [0, 1, 2, 3, 4]
queries = [[0, 3], [1, 2], [1, 4]]
쿼리 처리 과정:

첫 번째 쿼리 [0, 3]: arr[0]와 arr[3]를 바꿉니다.
처리 전: [0, 1, 2, 3, 4]
처리 후: [3, 1, 2, 0, 4]
두 번째 쿼리 [1, 2]: arr[1]와 arr[2]를 바꿉니다.
처리 전: [3, 1, 2, 0, 4]
처리 후: [3, 2, 1, 0, 4]
세 번째 쿼리 [1, 4]: arr[1]와 arr[4]를 바꿉니다.
처리 전: [3, 2, 1, 0, 4]
처리 후: [3, 4, 1, 0, 2]
최종 결과는 [3, 4, 1, 0, 2]입니다.

class Solution {
    public int[] solution(int[] arr, int[][] queries) {
        int temp;
        
        for(int i = 0; i < queries.length; i++){
            temp = arr[queries[i][0]];
            arr[queries[i][0]] = arr[queries[i][1]];
            arr[queries[i][1]] = temp;
        }
        
        return arr;
    }
}
