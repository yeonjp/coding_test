정수 l과 r이 주어졌을 때, l 이상 r이하의 정수 중에서 숫자 "0"과 "5"로만 이루어진 모든 정수를 오름차순으로 저장한 배열을 return 하는 solution 함수를 완성해 주세요.

만약 그러한 정수가 없다면, -1이 담긴 배열을 return 합니다.

제한사항
1 ≤ l ≤ r ≤ 1,000,000
입출력 예
l	r	result
5	555	[5, 50, 55, 500, 505, 550, 555]
10	20	[-1]
입출력 예 설명
입출력 예 #1

5 이상 555 이하의 0과 5로만 이루어진 정수는 작은 수부터 5, 50, 55, 500, 505, 550, 555가 있습니다. 따라서 [5, 50, 55, 500, 505, 550, 555]를 return 합니다.
입출력 예 #2

10 이상 20 이하이면서 0과 5로만 이루어진 정수는 없습니다. 따라서 [-1]을 return 합니다.

solution

import java.util.*;

class Solution {
    public int[] solution(int l, int r) {

        ArrayList<Integer> answerList = new ArrayList<>();

        //l ~ r
        for(int i = l; i <=r; i++){

            int num = i;
            boolean bool = true;

            // 0 or 5 check
            while(num > 0){

                int digit = num % 10;

                if(digit != 0 && digit != 5){
                    bool = false;
                    break;
                }
                num /= 10;
            }
            if(bool){
                answerList.add(i);
            }
        }

        int[] answer = new int[answerList.size() == 0 ? 1 : answerList.size()];

        if(answerList.size() == 0){
            answer [0] = -1;
        }else{
            for(int i = 0; i < answerList.size(); i++){
                answer[i] = answerList.get(i);
            }
        }

        return answer;
    }
}

import java.util.ArrayList;

class Solution {
    public int[] solution(int l, int r) {

        ArrayList<Integer> list = new ArrayList<>();

        //1부터 63까지 반복합니다. 이 범위는 2진수로 표현할 때 6자리(즉, 최대 111111)의 모든 조합을 포함합니다.
        for (int i = 1; i < 64; i++) {
            // i를 이진수 문자열로 변환한 후 정수로 변환하고 5를 곱함
            int num = Integer.parseInt(Integer.toBinaryString(i)) * 5;
            if (l <= num && num <= r)
                list.add(num);
        }

        return list.isEmpty() ? new int[] { -1 } : list.stream().mapToInt(i -> i).toArray();
    }
}


int num = Integer.parseInt(Integer.toBinaryString(i)) * 5;

i를 2진수 문자열로 변환한 후, 다시 정수로 변환합니다. 그 후, 해당 정수에 5를 곱합니다. 예를 들어, i가 3이라면, Integer.toBinaryString(3)은 "11"이 되고, 이것을 정수로 변환하면 11이 됩니다. 그 후, 11에 5를 곱해 55가 됩니다.
if (l <= num && num <= r) list.add(num);

변환된 num이 l 이상 r 이하일 경우, 리스트에 추가합니다.
return list.isEmpty() ? new int[] { -1 } : list.stream().mapToInt(i -> i).toArray();

리스트가 비어있다면 {-1} 배열을 반환하고, 비어있지 않다면 리스트를 정수 배열로 변환하여 반환합니다.
코드의 동작 방식
이 코드는 i를 1부터 63까지 반복하면서 각 i를 2진수 문자열로 변환하고, 그 문자열을 다시 정수로 변환한 후 5를 곱합니다.
예를 들어, i가 1일 때, 이진수는 "1", 정수로 변환하면 1, 5를 곱하면 5가 됩니다.
i가 2일 때, 이진수는 "10", 정수로 변환하면 10, 5를 곱하면 50이 됩니다.
i가 3일 때, 이진수는 "11", 정수로 변환하면 11, 5를 곱하면 55가 됩니다.
이렇게 만들어진 숫자가 l과 r 사이에 있으면 리스트에 추가됩니다.
모든 숫자를 체크한 후, 리스트가 비어있으면 {-1}을 반환하고, 그렇지 않으면 리스트를 배열로 변환하여 반환합니다.
이 접근 방식의 장점
2진수를 사용하여 0과 5로 구성된 모든 가능한 숫자를 쉽게 생성할 수 있습니다.
제한된 범위(1~63)에서 반복하기 때문에 효율적입니다. 이 범위는 2진수 6자리로 모든 가능한 조합을 포함합니다.
